<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@9/dist/sweetalert2.min.css" id="theme-styles">
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9/dist/sweetalert2.min.js"></script>
<meta name="viewport" content="width=device-width,
initial-scale=1">

<body class="" style="zoom: 1.5; background: lightgrey;" data-gr-c-s-loaded="true">
    <div style="
    background: slategrey;
    height: auto;
    width: 100%;
">
<!-- <div id="help" style="margin: 5px; float: left;">
			 <a style="" onclick="window.open('https://joshuscurtis.github.io/theway/help.html', 'https://joshuscurtis.github.io/theway/help.html'); return false;" class="btn btn-info text-white" role="button" aria-pressed="true">
            Help
        </a>
	</div> -->
	<div id="select" class="text-right" style="padding: 12px;">

		<i class="fa fa-cog"></i>
		<select id="mySelect">
			<option value="table">Table Orders</option>
			<option value="takeaway">Takeaway Orders</option>
			<option value="split">All Orders</option>
		</select>
<!-- 		<i>Max Orders:</i> -->
		<select id="myNum">
			<option value=20>20</option>
			<option value=10>10</option>
			<option value=5>5</option>


		</select>
<!-- 		<i>Display Order:</i> -->
		<select id="myOrder">
			<option value="asc">Oldest First</option>
			<option value="desc">Newest First</option>
		</select>
	</div>


       <!-- <a style="float:right;margin-top: 5px;margin-right: 10%;" onclick="window.open('table.html', 'table.html'); return false;" class="btn btn-primary text-white" role="button" aria-pressed="true">
            Table Orders
        </a> -->
		
		
    </div>
    <div style="width: 90%; margin-left: 5%; ">
        <br>
        	<div>
				<p class="text-center" id="count"></p>
	            <div class="center" id="content">
					
					<div id="loader" class="text-center">
						<div class="spinner-border" role="status">
			    			<span class="sr-only">Loading...</span>
	            		</div>
	            	</div>
	    		</div>
				<div id="right">
					
				</div>
</body>
<script>

    var allOrders; 
	var option = 'table'
	var view

	
function setCacheClosedOrder(id){
	orderData = searchOrders(id)
	orderData.isclosed = true
	sessionStorage.setItem(id, JSON.stringify(orderData));
}

function getCacheClosedOrder(id) {
	orderData = JSON.parse(sessionStorage.getItem(id));
	if (orderData == null) return false
	return orderData.isclosed;
}
	

function setCacheProcessingOrder(id){
	orderData = searchOrders(id)
	orderData.isprocessing = true
	sessionStorage.setItem(id, JSON.stringify(orderData));
}
function getCacheProcessingOrder(id) {
	orderData = JSON.parse(sessionStorage.getItem(id));
	if (orderData == null) return false
	return orderData.isprocessing;
}

function setToSplit() {
	view = "split"
	left = document.getElementById("content");
	right = document.getElementById("right");
	left.innerHTML = "<h3 class='text-center'>Table</h3>"
	right.innerHTML = "<h3 class='text-center'>Takeaway</h3>"
	left.setAttribute("style","width:45%;margin-left:5%;position:absolute;left:0;")
	right.setAttribute("style","width:45%;margin-right:5%;position:absolute;right:0;")
}

function unSplit() {
	view = "norm"
	left = document.getElementById("content");
	right = document.getElementById("right");
	left.setAttribute("style","")
	right.setAttribute("style","")
}


function checkOption() {
  var x = document.getElementById("mySelect").selectedIndex;
  return (document.getElementsByTagName("option")[x].value);
}	
function checkNum() {
  var x = document.getElementById("myNum")
  return (x.options[x.selectedIndex]).value;
}	

function checkOrder() {
  var x = document.getElementById("myOrder")
  return (x.options[x.selectedIndex]).value;
}	

function searchOrders(id){
  orders = allOrders;
  for (var y = 0; y < orders.length; y++) {
    currentid = orders[y].order_id;
    if(currentid == id) { 
      return orders[y]
    }
  }
  return dummy;
}

function newestOrder(){
 orders = allOrders;
 id = 0
  for (var y = 0; y < orders.length; y++) {
    currentid = orders[y].order_id;
    if(currentid > id) { 
      id = currentid;
    }
  }
        return id
}

function isClosed(id){
	return searchOrders(id).isclosed;
}

function isClosed2(id) {
try {
	closed = searchOrders(id).isclosed;
	}
catch(err) {
    closed = true;
	} 
return closed;
}


function isProcessing(id){
	processing = getCacheProcessingOrder(id);
	if(processing || searchOrders(id).isprocessing) return true;
  	return false;
}
function isTable2(id){
  return searchOrders(id).istable;
}

function isTable(id) {
try {
	table = searchOrders(id).istable;
	}
catch(err) {
    return true;
	} 
finally {
	return table;
	}	
}

dom = 0
function isNew() {
	
	dom = document.getElementById(newestOrder()+1)
}

 

function draw() {
  divId = searchOrders(newestOrder()).order_id;
  //if(isClosed(divId) == true){ divId = divId-1}
    if(document.getElementById(divId) == null && isClosed(divId) != true){
    g = document.createElement('div');
    g.setAttribute("id", divId);
    document.getElementById("content").appendChild(g);
    document.getElementById(divId).innerHTML = (createOrderCardContent(searchOrders(newestOrder())))
    g.setAttribute("onclick", 'highlight(this);')
  
  }
}
function drawNth(x, table) {
  divId = searchOrders(newestOrder()).order_id -x;
  if (document.getElementById(divId) != null && view != "split") document.getElementById(divId).remove();
  if(option=="split" && isTable == false) document.getElementById(divID).remove();
  
 
  setOld(newestOrder()-x);
  
	//check if order is closed and is a table order
	
	dbOrCacheClosed = (isClosed(divId) || getCacheClosedOrder(divId));
	
    if(document.getElementById(divId) == null && (dbOrCacheClosed == false) && isTable(divId) == table)
	   {
		  //create div
	      g = document.createElement('div');
		  
		  //set id and styling
	      g.setAttribute("id", divId);
		  
		  
	      g.setAttribute("style", "margin: 10px");
	      g.setAttribute("class", "card text-white bg-success mb-3")
		  
		  //set card content
		  isSplit = document.getElementById("content").getAttribute("style")
		  
		  target = "content"
		  if(isSplit == "width:45%;margin-left:5%;position:absolute;left:0;") {
			  if(table == true) target = "content"
			  if(table == false) target = "right"
		  }
		 
		  
	      document.getElementById(target).appendChild(g);
	      document.getElementById(divId).innerHTML = (createOrderCardContent(searchOrders(divId)))
	      g.setAttribute("onclick", 'remove2(divId);')
		  
		  //highlight for processing 
	      if (isProcessing(divId)) highlight(g)
	    }
}

function drawPastXTableOrders(x, order){
	if(order == 'asc'){
		for(i=x; i>=0;i--){
	    drawNth(i, true);
	  	}
	}
	if(order == 'desc'){
		for(i=0; i<=x;i++){
	    drawNth(i, true);
		}
	}
}
function drawPastXTakeawayOrders(x, order){
	if(order =='desc'){
	  for(i=0; i<=x;i++){
	  		drawNth(i, false);
	  }
	 }
	if (order == 'asc'){
		for (var i = x; i >= 0; i--) {
			drawNth(i,false)
		}
	}
}
function checkIfStillOpen(id){
  closed = isClosed(id)
  if (closed) {
    document.getElementById(id).remove();
  }
}

function countOpen(num) {
  count = 0;
  for(i=0; i<=num; i++){
    
    thisOrder = searchOrders(newestOrder()-i)
    if ((isClosed(newestOrder()-i) != true) && (isTable(newestOrder()-i))) {
      count = count+1
    } 
  }
  return count;
}

function countOpenTake(num) {
  count = 0;
  for(i=0; i<=num; i++){
    
    thisOrder = searchOrders(newestOrder()-i)
    if ((isClosed(newestOrder()-i) != true) && (isTable(newestOrder()-i) == false)) {
      count = count+1
    } 
  }
  return count;
}



function highlight(el) {
    var element = el;
    id = element.getAttribute("id");
    console.log("highlight"+id)
    if (element.getAttribute("class") == "card text-white bg-warning mb-3") { remove(el) };
    element.setAttribute("class", 'card text-white bg-warning mb-3')
    processOrder(id)
}

function remove2(id) {
    element = id;
    closeOrderModal(id)
}
function closeOrderModal(id) {
          Swal.fire({
          title: 'CONFRIM ORDER: '+((id%99)+1),
          text: "Click Yes, to confirm the order as complete",
          icon: 'success',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, close order!'
        }).then((result) => {
          if (result.value) {
        //localStorage.removeItem(id);
        //localStorage.setItem("closed", id + "," + localStorage.getItem("closed"));
        closeOrder(id);
		setCacheClosedOrder(id);
        document.getElementById(id).remove();
                  }
        });
}

function assignOrderModal(id,element) {
          Swal.fire({
          title: 'Assign Order: '+((id%99)+1),
          text: "Assign the order to a area.",
          icon: 'info',
          showCancelButton: true,
          cancelButtonText: 'Bar',
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Kitchen'
        }).then((result) => {
          if (result.value) {
            assginOrder(id, "Kitchen")
            } else {assginOrder(id,"Bar")};

        });
}


function alertModal() {
          Swal.fire({
          title: 'Lots of open orders',
          text: "There are more than 7 open orders! ",
          icon: 'info',
          confirmButtonColor: '#3085d6',
          confirmButtonText: 'Ok'
	  })
	}


function remove(el) {
    var element = el;
    id = element.getAttribute("id");
    assignOrderModal(id,element)
}


function closeOrder(id) {
document.getElementById(id).remove()
var settings = {
  "url": "https://mydbrestservice.herokuapp.com/orders?order_id=eq."+id,
  "method": "PATCH",
  "timeout": 0,
  "headers": {
    "Prefer": "resolution=merge-duplicates",
    "Content-Type": "application/x-www-form-urlencoded"
  },
  "data": {
    "isclosed": true
  }
};

$.ajax(settings).done(function (response) {
	//document.getElementById(id).remove()
});
}


function setOld(id) {
var settings = {
  "url": "https://mydbrestservice.herokuapp.com/orders?order_id=eq."+id,
  "method": "PATCH",
  "timeout": 0,
  "headers": {
    "Prefer": "resolution=merge-duplicates",
    "Content-Type": "application/x-www-form-urlencoded"
  },
  "data": {
    "isnew": false
  }
};

$.ajax(settings).done(function (response) {
}).fail(function(data){console.log("fail ")});
}




function assginOrder(id, assignee) {
var settings = {
  "url": "https://mydbrestservice.herokuapp.com/orders?order_id=eq."+id,
  "method": "PATCH",
  "timeout": 0,
  "headers": {
    "Prefer": "resolution=merge-duplicates",
    "Content-Type": "application/x-www-form-urlencoded"
  },
  "data": {
    "assignee": assignee
  }
};

$.ajax(settings).done(function (response) {
});
}


function processOrder(id) {
setCacheProcessingOrder(id);
var settings = {
  "url": "https://mydbrestservice.herokuapp.com/orders?order_id=eq."+id,
  "method": "PATCH",
  "timeout": 0,
  "headers": {
    "Prefer": "resolution=merge-duplicates",
    "Content-Type": "application/x-www-form-urlencoded"
  },
  "data": {
    "isprocessing": true
  }
};

$.ajax(settings).done(function (response) {
});
}

displayOrder = "asc"
numOfPastOrders = 20

//setInterval(function(){
  // getAllOrders();
  // option = checkOption();
  // numOfPastOrders = checkNum();
  // displayOrder = checkOrder();

//}, 1000);
var audio = new Audio('https://github.com/joshuscurtis/theway/raw/master/piece-of-cake.mp3');
//setInterval(function(){
	// if (searchOrders(newestOrder()).isnew == true) audio.play()
	// content = document.getElementById("content");
	// content.innerHTML = '';
	// if(option == 'table') {
	// 	unSplit()
	// 	drawPastXTableOrders(numOfPastOrders, displayOrder)
	// 	openOrders = countOpen(numOfPastOrders)
	// };
	// if(option == 'takeaway') {
	// 	unSplit()
	// 	drawPastXTakeawayOrders(numOfPastOrders, displayOrder);
	// 	openOrders = countOpenTake(numOfPastOrders);
	// }
   	// if(option == "split"){
	// 	openOrders = countOpen(numOfPastOrders) + countOpenTake(numOfPastOrders);
	// 	setToSplit()
	// 	drawPastXTakeawayOrders(numOfPastOrders, displayOrder);
	// 	drawPastXTableOrders(numOfPastOrders, displayOrder);
   	// }
    // count = document.getElementById("count")
    // count.innerHTML = "<strong col> Current Open Orders: "+(openOrders) +"</strong>"
    // if(openOrders>=5) count.setAttribute("style", "color: red;")
    // if(openOrders<=4) count.setAttribute("style", "color: orange;")
    // if(openOrders<=2) count.setAttribute("style", "color: green;")
	
	// loader = document.getElementById('loader');
	// if (loader != null) loader.remove();}
	
	 
	
	//},5000); //time between page reloads

	setInterval(function(){
		if(openOrders > 7) alertModal();
	}, 60000)
	

function refresh() {
	  getAllOrders();
	  option = checkOption();
	  numOfPastOrders = checkNum();
	  displayOrder = checkOrder();
    setTimeout(refresh, 2000);
    // ...
}




function refresh2() {
	if (searchOrders(newestOrder()).isnew == true) audio.play()
	content = document.getElementById("content");
	content.innerHTML = '';
	if(option == 'table') {
		unSplit()
		drawPastXTableOrders(numOfPastOrders, displayOrder)
		openOrders = countOpen(numOfPastOrders)
	};
	if(option == 'takeaway') {
		unSplit()
		drawPastXTakeawayOrders(numOfPastOrders, displayOrder);
		openOrders = countOpenTake(numOfPastOrders);
	}
   	if(option == "split"){
		openOrders = countOpen(numOfPastOrders) + countOpenTake(numOfPastOrders);
		setToSplit()
		drawPastXTakeawayOrders(numOfPastOrders, displayOrder);
		drawPastXTableOrders(numOfPastOrders, displayOrder);
   	}
    count = document.getElementById("count")
    count.innerHTML = "<strong col> Current Open Orders: "+(openOrders) +"</strong>"
    if(openOrders>=5) count.setAttribute("style", "color: red;")
    if(openOrders<=4) count.setAttribute("style", "color: orange;")
    if(openOrders<=2) count.setAttribute("style", "color: green;")
	
	loader = document.getElementById('loader');
	if (loader != null) loader.remove();
setTimeout(refresh2, 5000);
}

setTimeout(refresh, 2000);
setTimeout(refresh2, 5000);






	
	
function getAllOrders() {
var settings = {
  "url": "https://mydbrestservice.herokuapp.com/orders",
  "method": "GET",
  "timeout": 0,
  "headers": {
    "Content-Type": "application/x-www-form-urlencoded"
  },
};

$.ajax(settings).done(function (response) {
  allOrders = response; 
  //console.log(response);
  table = isOrderForTable

});
}
 //******************************************* 
function doesOrderContainTable(orderData) {
    var itemsInOrder = orderData.length;
    var count = -1;
    var tableCheck = null;
    var tableOrder;
    for (var y = 0; y < itemsInOrder; y++) {
        var orderName = orderData[y].name.substring(0,5)
        if(orderName == "Table") {
            tableOrder = true;
            tableCheck = orderData[y].name;
            table = orderData[y].name;
            count = count + 1
        }
    }
    if(tableCheck == null) {tableOrder = false}
return tableOrder;
}

var initCounter = 0;


function changeOrderStatus(status, id) {
var settings = {
  "url": "https://mydbrestservice.herokuapp.com/orders?order_id=eq."+id,
  "method": "PATCH",
  "timeout": 0,
  "headers": {
    "Prefer": "resolution=merge-duplicates",
    "Content-Type": "application/x-www-form-urlencoded"
  },
  "data": {
    "isclosed": status
  }
};

$.ajax(settings).done(function (response) {
  //console.log(response);
});
}

function fetchDetails(id){
var settings = {
  "url": "https://mydbrestservice.herokuapp.com/orders?order_id=eq."+id,
  "method": "GET",
  "timeout": 0,
  "headers": {
    "Prefer": "resolution=merge-duplicates",
    "Content-Type": "application/x-www-form-urlencoded"
  },
};

$.ajax(settings).done(function (response) {
  localStorage.setItem("response", JSON.stringify(response));
  return response;
});
}

function getOrderDetails(id) {
  fetchDetails(id)
  details = JSON.parse(localStorage.getItem("response"))
  return details
}


function isOrderForTable(id){
var settings1 = {
  "url": "https://mydbrestservice.herokuapp.com/orders?order_id=eq."+id,
  "method": "GET",
  "timeout": 0,
  "headers": {
    "Prefer": "resolution=merge-duplicates",
    "Content-Type": "application/x-www-form-urlencoded"
  },
};

$.ajax(settings1).done(function (response) {
  table = 99
  if(response[0].istable != null) table = response[0].istable;

  localStorage.setItem("tableResponse", table);
});
  return localStorage.getItem("tableResponse");
}

function isOrderClosed(id){
  order = getOrderDetails(id);
  return order[0].isclosed
}




function maxOrder(){
  lastId = 0;
  var settings = {
    "url": "https://mydbrestservice.herokuapp.com/orders",
    "method": "GET",
    "timeout": 0,
    "headers": {
      "Prefer": "resolution=merge-duplicates",
      "Content-Type": "application/x-www-form-urlencoded"
    }

  };

  $.ajax(settings).done(function (response) {
    localStorage.setItem("allOrders", JSON.stringify(response));
  });
  data = JSON.parse(localStorage.getItem("allOrders"));
  for (var i = 0; i < data.length ; i++) {
    if (data[i].order_id > lastId) {
      lastId = data[i].order_id
    }

  }
  return lastId;
}

function createOrderCard(id){
    $.ajax({
        url: 'https://mydbrestservice.herokuapp.com/orders?order_id=eq.'+id,
        success: function(response) {
            successCallback(response,id);
        }
    });
}

function successCallback(responseObj,id){
    createOrderCardContent(responseObj);
}

function foo(callback) {

    $.ajax({
        url: 'https://mydbrestservice.herokuapp.com/orders?order_id=eq.0',
        success: function(response) {
           return callback(null, response);
        }
    });
}

var result = foo(function(err, result){
          if (!err)
		  console.log("");    
}); 
    html2 = ""

function createOrderCardContent(responseObj) {
    id = responseObj.order_id
    orderDetails = responseObj;
    orderData = orderDetails.products
    istable = orderDetails.istable;
    isclosed = orderDetails.isclosed;
    isnew = orderDetails.isnew;
    tableNum = 99; //TODO


    for (var y = 0; y < orderData.length; y++) {
        if ((orderData[y].name).substring(0,5) == "Table") {
          tableNum = (orderData[y].name).substring(6,10)
        }
      }

    
    if (istable == true) var html1 = " <h5> Table "+tableNum+" (Order: " + (id % 99+1) + ")</h5>";
    if (istable == false) var html1 = " <h5> Order: " + (id % 99+1) + "</h5>";



    var cardTop = '<div class="card text-center" style="background-color: inherit">' + html1 + '<div style="padding: 0;" class="card-body"><h5 class="card-title">'
    var cardMid = '</h5>'
    var cardEnd = '</div></div> ';
    var variantName = ""
    //loop through each item in a order
    for (var y = 0; y < orderData.length; y++) {
        if ((orderData[y].name).substring(0,5) != "Table") {

            if (orderData[y].variantName == null || orderData[y].variantName == "" ) {
                    html2 = "<p>"+html2 +"<p>"+ "<strong>" + orderData[y].name + "</strong> <br> Qty: <i>" + orderData[y].quantity + ' </i> <br>'

            }
            else {
                variantName = "<br>" + orderData[y].variantName+"<br>"
            html2 = "<p>"+html2 +"<p>"+ "<strong>" + orderData[y].name + "</strong><i>" + variantName + "</i> Qty: <i><strong>" + orderData[y].quantity + '</strong> </i> <br>'

            }

            if (orderData[y].comment != undefined) {
                html2 = "<p>" + html2 + "Comments:<i> " + orderData[y].comment+"</i><br> </p>";
            }


        }
    }

    if (orderDetails.assignee == null) var assignee = "Not Assigned";
    else assignee = orderDetails.assignee;

            html2 = '<button onclick="event.stopPropagation();highlight(this.parentNode.parentNode.parentNode.id)" style="position: absolute; top: -1px; right: 1px;" type="button" class="close" aria-label="Close"><span class="fa fa-cog" aria-hidden="true"></span></button>'+ "<p>" + html2 + "<b style='color:black;'> " + assignee+
            "</b><br> </p>";

    //generate final order card HTML
    buildHTML = cardTop + cardMid + html2  + cardEnd;
    html2 = ""
    //console.log(buildHTML);
    //document.getElementById(id).innerHTML = buildHTML;          
    return buildHTML;
}

dummy = {"istable":true,"order_id":0000,"products":[{"libraryProduct":true,"barcode":"","variantUuid":"e16c7840-ba25-11ea-b2bf-478540e0bb7a","autoGenerated":false,"quantity":"1","productUuid":"e16b66d0-ba25-11ea-bd58-e0928794ceb0","name":"Table 00","id":"0","type":"PRODUCT","vatPercentage":0,"unitPrice":0,"description":"","rowTaxableAmount":0},{"libraryProduct":true,"variantUuid":"28bd8b02-36c1-11ea-8227-e32937f459dc","autoGenerated":false,"quantity":"999","productUuid":"28bd8b00-36c1-11ea-8227-e32937f459dc","name":"error","id":"1","type":"PRODUCT","variantName":"error","vatPercentage":0,"unitPrice":60,"costPrice":36,"description":"","rowTaxableAmount":60},{"libraryProduct":true,"barcode":"","variantUuid":"78eb52c0-3c5b-11ea-91b7-f297517db5ec","autoGenerated":false,"quantity":"1","productUuid":"78ea8f70-3c5b-11ea-8585-0fa9cfe2507c","name":"ERROR ERROR","id":"2","type":"PRODUCT","vatPercentage":0,"unitPrice":200,"description":"","rowTaxableAmount":200},{"libraryProduct":true,"barcode":"","variantUuid":"e4fd4ac0-3f50-11ea-895f-51d045b6cde3","autoGenerated":false,"quantity":"1","productUuid":"e4fb4ef0-33f50-11ea-98d2-51be7ae620c7","name":"ERROR","id":"3","type":"PRODUCT","vatPercentage":0,"unitPrice":220,"description":"","rowTaxableAmount":220}],"isnew":true,"isclosed":true,"isprocessing":null,"assignee":"An ERROR has occured."}




</script>
<style type="text/css">
br {
    margin: 0;
}

h5 {
    margin: 0;
}


</style>
